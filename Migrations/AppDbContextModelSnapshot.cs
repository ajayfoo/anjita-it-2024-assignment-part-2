// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend_assignment.Data;

#nullable disable

namespace backend_assignment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend_assignment.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Answer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Mumbai"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Delhi"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Chennai"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Banglore"
                        });
                });

            modelBuilder.Entity("backend_assignment.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionPaperId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPaperId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionPaperId = 1
                        });
                });

            modelBuilder.Entity("backend_assignment.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CorrectAnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("FirstAnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("FourthAnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("SecondAnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("ThirdAnswerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CorrectAnswerId");

                    b.HasIndex("FirstAnswerId");

                    b.HasIndex("FourthAnswerId");

                    b.HasIndex("SecondAnswerId");

                    b.HasIndex("ThirdAnswerId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "What is the capital of India?",
                            CorrectAnswerId = 1,
                            FirstAnswerId = 1,
                            FourthAnswerId = 4,
                            SecondAnswerId = 2,
                            ThirdAnswerId = 3
                        });
                });

            modelBuilder.Entity("backend_assignment.Models.QuestionPaper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Q1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Q2Id")
                        .HasColumnType("integer");

                    b.Property<int>("Q3Id")
                        .HasColumnType("integer");

                    b.Property<int>("Q4Id")
                        .HasColumnType("integer");

                    b.Property<int>("Q5Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Q1Id");

                    b.HasIndex("Q2Id");

                    b.HasIndex("Q3Id");

                    b.HasIndex("Q4Id");

                    b.HasIndex("Q5Id");

                    b.ToTable("QuestionPaper");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Q1Id = 1,
                            Q2Id = 1,
                            Q3Id = 1,
                            Q4Id = 1,
                            Q5Id = 1
                        });
                });

            modelBuilder.Entity("backend_assignment.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExamId")
                        .HasColumnType("integer");

                    b.Property<int?>("Q1AnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Q2AnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Q3AnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Q4AnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Q5AnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Q1AnswerId");

                    b.HasIndex("Q2AnswerId");

                    b.HasIndex("Q3AnswerId");

                    b.HasIndex("Q4AnswerId");

                    b.HasIndex("Q5AnswerId");

                    b.HasIndex("StudentId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("backend_assignment.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("backend_assignment.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("backend_assignment.Models.Exam", b =>
                {
                    b.HasOne("backend_assignment.Models.QuestionPaper", "QuestionPaper")
                        .WithMany()
                        .HasForeignKey("QuestionPaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionPaper");
                });

            modelBuilder.Entity("backend_assignment.Models.Question", b =>
                {
                    b.HasOne("backend_assignment.Models.Answer", "CorrectAnswer")
                        .WithMany()
                        .HasForeignKey("CorrectAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Answer", "FirstAnswer")
                        .WithMany()
                        .HasForeignKey("FirstAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Answer", "FourthAnswer")
                        .WithMany()
                        .HasForeignKey("FourthAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Answer", "SecondAnswer")
                        .WithMany()
                        .HasForeignKey("SecondAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Answer", "ThirdAnswer")
                        .WithMany()
                        .HasForeignKey("ThirdAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorrectAnswer");

                    b.Navigation("FirstAnswer");

                    b.Navigation("FourthAnswer");

                    b.Navigation("SecondAnswer");

                    b.Navigation("ThirdAnswer");
                });

            modelBuilder.Entity("backend_assignment.Models.QuestionPaper", b =>
                {
                    b.HasOne("backend_assignment.Models.Question", "Q1")
                        .WithMany()
                        .HasForeignKey("Q1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Question", "Q2")
                        .WithMany()
                        .HasForeignKey("Q2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Question", "Q3")
                        .WithMany()
                        .HasForeignKey("Q3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Question", "Q4")
                        .WithMany()
                        .HasForeignKey("Q4Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Question", "Q5")
                        .WithMany()
                        .HasForeignKey("Q5Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Q1");

                    b.Navigation("Q2");

                    b.Navigation("Q3");

                    b.Navigation("Q4");

                    b.Navigation("Q5");
                });

            modelBuilder.Entity("backend_assignment.Models.Response", b =>
                {
                    b.HasOne("backend_assignment.Models.Exam", null)
                        .WithMany("Responses")
                        .HasForeignKey("ExamId");

                    b.HasOne("backend_assignment.Models.Answer", "Q1Answer")
                        .WithMany()
                        .HasForeignKey("Q1AnswerId");

                    b.HasOne("backend_assignment.Models.Answer", "Q2Answer")
                        .WithMany()
                        .HasForeignKey("Q2AnswerId");

                    b.HasOne("backend_assignment.Models.Answer", "Q3Answer")
                        .WithMany()
                        .HasForeignKey("Q3AnswerId");

                    b.HasOne("backend_assignment.Models.Answer", "Q4Answer")
                        .WithMany()
                        .HasForeignKey("Q4AnswerId");

                    b.HasOne("backend_assignment.Models.Answer", "Q5Answer")
                        .WithMany()
                        .HasForeignKey("Q5AnswerId");

                    b.HasOne("backend_assignment.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Q1Answer");

                    b.Navigation("Q2Answer");

                    b.Navigation("Q3Answer");

                    b.Navigation("Q4Answer");

                    b.Navigation("Q5Answer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("backend_assignment.Models.Result", b =>
                {
                    b.HasOne("backend_assignment.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_assignment.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("backend_assignment.Models.Exam", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
